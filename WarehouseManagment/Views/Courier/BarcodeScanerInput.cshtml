@using System.ComponentModel;
@{
    ViewData["Title"] = $"Изпращане по куриер";
}

<h1 class="text-center">@ViewData["Title"]</h1>

<div class="row justify-content-between mt-5">
    <div class="col-4">
        <form class="d-flex" method="get">
            <input type="text" id="barcode" name="id" class="form-control me-2" placeholder="Inventory Id" aria-label="Inventory Id" aria-describedby="basic-addon2">
            <button type="submit" class="btn btn-outline-success">Търси</button>
        </form>
    </div>
    <div class="product-container col-6"></div>
</div>



@section Scripts{
    <script>
        $(document).ready(function () {

            $('#barcode').on('input', function () {
                var scannedBarcode = $(this).val();

                $.ajax({
                    url: '/Courier/Index',
                    type: 'GET',
                    data: { barcode: scannedBarcode },
                    success: function (productData) {
                        $('.product-container').empty();
                        createProductRow(productData);
                        document.getElementById('barcode').value = "";
                    }
                });
            })

            function createProductRow(productData) {
                var newRow = $('<div class="row product-row">');
                newRow.append($('<div class="card-description text-center">').text("Артикул - " + productData.productData.productSKU + ' / ' + productData.productData.description + ' / ' + productData.productData.size));
                newRow.append($('<div class="py-1 card-description text-center">').text("Наличност - " + productData.productData.availability + "бр."));
                var shippingBillRow = $('<div class="input-group input-group-lg mb-2">');
                var shippingBillDescr = $('<span class="input-group-text fw-bold" id="inputGroup-sizing-lg">Товарителница :</span>');
                var shippingBillInput = $('<input type="text" class="shipping-bill form-control" aria-label="Disabled input example" >').val(productData.productData.shippmentBill);
                shippingBillRow.append(shippingBillDescr);
                shippingBillRow.append(shippingBillInput);
                newRow.append(shippingBillRow);
                newRow.append(createCourierNameDropdown(productData.productData.courierName));
                var unitPriceRow = $('<div class="input-group input-group-lg mb-2">');
                var unitPriceColDescr = $('<span class="input-group-text fw-bold" id="inputGroup-sizing-lg">Единична цена :</span>');
                var unitPriceInput = $('<input type="number" class="product-unit-price form-control" aria-label="Disabled input example" disabled>').val(productData.productData.unitPrice);
                unitPriceRow.append(unitPriceColDescr);
                unitPriceRow.append(unitPriceInput);
                newRow.append(unitPriceRow);
                newRow.append(createPaymentMethodDropdown(productData.productData.paymentMethod));
                var quantityRow = $('<div class="input-group input-group-lg mb-2">');
                var quantityColDescr = $('<span class="input-group-text fw-bold" id="inputGroup-sizing-lg">Количество :</span>');
                var quantityInput = $('<input type="number" min="1" max="" class="product-quantity form-control">').val(1).attr('max', productData.productData.availability);;
                quantityRow.append(quantityColDescr);
                quantityRow.append(quantityInput);
                newRow.append(quantityRow);
                newRow.append(createDiscountDropdown(productData.productData.discount));
                var totalPriceRow = $('<div class="input-group input-group-lg mb-2">');
                var totalPriceColDescr = $('<span class="input-group-text fw-bold" id="inputGroup-sizing-lg">Тотал цена :</span>');
                var totalPriceInput = $('<input class="product-total-price form-control" id="TotalPrice" aria-label="Disabled input example" disabled>').val(productData.productData.unitPrice);
                totalPriceRow.append(totalPriceColDescr);
                totalPriceRow.append(totalPriceInput);
                newRow.append(totalPriceRow);
                var saleButton = $('<div class="text-center"><button class="p-2 sale-button btn btn-outline-success">ОТЧЕТИ КУРИЕР</button></div>');
                newRow.append(saleButton);

                function UpdateTotalPriceByDiscount() {
                    var unitPrice = parseFloat(unitPriceInput.val());
                    var quantity = parseInt(quantityInput.val());
                    var discount = parseFloat($('.product-discount option:selected').val());

                    if (isNaN(discount)) {
                        discount = 0;
                    }

                    var totalPrice = unitPrice * quantity;

                    if (discount > 0) {
                        totalPrice = ((unitPrice - (unitPrice * discount / 100)) * quantity).toFixed(2);
                    } else {
                        totalPrice = (unitPrice * quantity).toFixed(2);
                    }

                    $('#TotalPrice').val(totalPrice);
                }
                $('.product-container').append(newRow);
                newRow.find('.product-discount').on('change', UpdateTotalPriceByDiscount);

                function UpdateTotalPriceByQuantity() {
                    var unitPrice = parseFloat(unitPriceInput.val());
                    var quantity = parseInt(quantityInput.val());
                    var discount = parseFloat($('.product-discount option:selected').val());

                    if (isNaN(discount)) {
                        discount = 0;
                    }

                    var totalPrice = unitPrice * quantity;

                    if (discount > 0) {
                        totalPrice = ((unitPrice - (unitPrice * discount / 100)) * quantity).toFixed(2);
                    } else {
                        totalPrice = (unitPrice * quantity).toFixed(2);
                    }
                    $('#TotalPrice').val(totalPrice);
                }
                quantityInput.on('input', UpdateTotalPriceByQuantity);
                UpdateTotalPriceByQuantity();

                saleButton.on('click', function () {
                    var courierName = parseInt($('.courier-list option:selected').val());
                    var shippmentBill = $('.shipping-bill').val()
                            var sku = productData.productData.productSKU;
                    var unitPrice = parseFloat(unitPriceInput.val());
                    var discount = parseInt($('.product-discount option:selected').val());
                    var availability = productData.productData.availability;
                    var quantity = parseInt(quantityInput.val());
                    if (quantity > availability) {
                        alert("Количеството което сте избрали е по-голямо от наличностите.");
                        return false;
                    }
                    var date = productData.productData.sendDate;
                    var productId = productData.productData.productId;
                    var productInventoryId = productData.productData.productInventoryId;
                    var paymentMethod = parseInt($('.product-paymentMethod option:selected').val());
                    var totalPrice;
                    if (discount > 0) {
                        totalPrice = (unitPrice - (unitPrice * discount / 100)) * quantity;
                    } else {
                        totalPrice = unitPrice * quantity;
                    }

                    var courier = {
                        productSKU: sku,
                        unitPrice: unitPrice,
                        discount: discount,
                        quantity: quantity,
                        sendDate: date,
                        productId: productId,
                        totalPrice: totalPrice,
                        productInventoryId: productInventoryId,
                        courierPaymentMethod: paymentMethod,
                        shippmentBill: shippmentBill,
                        courierName: courierName
                    };

                    $.ajax({
                        url: '/Courier/Create',
                        type: 'POST',
                        data: courier,
                        success: function (response) {
                            if (response.success) {
                                // Handle a successful sale (e.g., update UI)
                                // Change the button text to "SOLD" and disable discount and quantity inputs
                                alert("Успешно изпратено по куриер!")
                                window.location.reload();
                            } else {
                                // Handle an unsuccessful sale (e.g., show an error message)
                                alert(response.message);
                            }
                        }
                    });
                });

            }
            //Create courierName dropdown
            function createCourierNameDropdown(selectedCourier) {
                var container = $('<div class="input-group input-group-lg mb-2">');
                var description = $('<label class="input-group-text fw-bold" for="inputGroupSelect01">Куриер : </label>');
                var dropdown = $('<select class="courier-list form-select" id="inputGroupSelect01">');
                var courierNames = [
        @foreach (var value in Enum.GetValues(typeof(CourierName)).Cast<CourierName>())
        {
            <text>{ value: "@((int)value)", text: "@value" }, </text>
        }
                                            ];

                for (var i = 0; i < courierNames.length; i++) {
                    var optionElement = $('<option>').attr('value', courierNames[i].value).text(courierNames[i].text);
                    if (courierNames[i].value === selectedCourier) {
                        optionElement.attr('selected', 'selected');
                    }
                    dropdown.append(optionElement);
                }

                container.append(description);
                container.append(dropdown);

                return container;
            }

            //Create discount dropdown
            function createDiscountDropdown(selectedDiscount) {
                var container = $('<div class="input-group input-group-lg mb-2">');
                var description = $('<label class="input-group-text fw-bold" for="inputGroupSelect01">Отстъпка : </label>');
                var dropdown = $('<select class="product-discount form-select" id="inputGroupSelect01">');
                var discountValues = [
        @foreach (var value in Enum.GetValues(typeof(Discount)).Cast<Discount>())
        {
            <text>{ value: @((int)value) }, </text>
        }
                                    ];

                discountValues.forEach(function (option) {
                    var optionElement = $('<option>').attr('value', option.value).text(option.value + "%");

                    if (option.value === selectedDiscount) {
                        optionElement.attr('selected', 'selected');
                    }
                    dropdown.append(optionElement);
                });

                container.append(description);
                container.append(dropdown);

                return container;
            }

            //Create PaymentMethod dropdown
            function createPaymentMethodDropdown(selectedPaymentMethod) {
                var container = $('<div class="input-group input-group-lg mb-2">');
                var description = $('<label class="input-group-text fw-bold" for="inputGroupSelect01">Плащане : </label>');
                var dropdown = $('<select class="product-paymentMethod form-select">');
                var paymentMethods = [
        @foreach (var value in Enum.GetValues(typeof(CourierPaymentMethod)).Cast<CourierPaymentMethod>())
        {
            var enumType = typeof(CourierPaymentMethod);
            var enumMember = enumType.GetMember(value.ToString())[0];
            var descriptionAttribute = enumMember.GetCustomAttributes(typeof(DescriptionAttribute), false).FirstOrDefault() as DescriptionAttribute;
            var paymentDescription = descriptionAttribute != null ? descriptionAttribute.Description : value.ToString();

            var encodedDescription = Html.Raw(paymentDescription.Replace("\"", "&quot;"));
            <text>{ value: "@((int)value)", text: "@encodedDescription" }, </text>
        }
                                    ];

                for (var i = 0; i < paymentMethods.length; i++) {
                    var optionElement = $('<option>').attr('value', paymentMethods[i].value).text(paymentMethods[i].text);
                    if (paymentMethods[i].value === selectedPaymentMethod) {
                        optionElement.attr('selected', 'selected');
                    }
                    dropdown.append(optionElement);
                }

                container.append(description);
                container.append(dropdown);

                return container;
            }

        })
    </script>
}